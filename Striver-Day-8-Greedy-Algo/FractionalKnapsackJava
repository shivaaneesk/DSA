class Item {
    int value, weight;

    Item(int value, int weight) {
        this.value = value;
        this.weight = weight;
    }
}

class itemComparator implements Comparator<Item>
{
    @Override
    public int compare(Item a, Item b) 
    {
        double r1 = (double)(a.value) / (double)(a.weight); 
        double r2 = (double)(b.value) / (double)(b.weight); 
        if(r1 < r2) return 1; 
        else if(r1 > r2) return -1; 
        else return 0; 
    }
}

class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(List<Integer> values, List<Integer> weights, int w) {
        // code here
        int n = values.size();
        Item[] items = new Item[n];
        
        // Create items array with value and weight
        for (int i = 0; i < n; i++) {
            items[i] = new Item(values.get(i), weights.get(i));
        }

        // Sort items by value/weight ratio
        Arrays.sort(items, new itemComparator());

        int curWeight = 0;
        double finalValue = 0.0;

        // Iterate through the sorted items
        for (int i = 0; i < n; i++) {
            if (curWeight + items[i].weight <= w) {
                curWeight += items[i].weight;
                finalValue += items[i].value;
            } else {
                int remain = w - curWeight;
                finalValue += ((double) items[i].value / (double) items[i].weight) * (double) remain;
                break;
            }
        }

        return finalValue;
    }
}
