class Meeting {
    int start;
    int end;
    int pos;

    Meeting(int start, int end, int pos) {
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class MeetingComparator implements Comparator<Meeting> {
    @Override
    public int compare(Meeting o1, Meeting o2) {
        if (o1.end < o2.end) {
            return -1;
        } else if (o1.end > o2.end) {
            return 1;
        } else if (o1.pos < o2.pos) {
            return -1;
        }
        return 1;
    }
}

class Solution {
    public int maxMeetings(int n, int[] start, int[] end) {
        ArrayList<Meeting> meetings = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            meetings.add(new Meeting(start[i], end[i], i + 1));
        }

        MeetingComparator mc = new MeetingComparator();
        Collections.sort(meetings, mc);

        int limit = meetings.get(0).end;
        int count = 1; // First meeting is always selected

        for (int i = 1; i < n; i++) {
            if (meetings.get(i).start > limit) {
                limit = meetings.get(i).end;
                count++; // Increment count for every additional meeting
            }
        }

        return count; // Return number of meetings
    }
}
