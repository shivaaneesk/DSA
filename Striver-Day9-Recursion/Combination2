class Solution {
    public void findCombinations(int index, int target, int[] candidates, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = index; i < candidates.length; i++) {
            // Skip duplicates to ensure unique combinations
            if (i > index && candidates[i] == candidates[i - 1]) continue;

            // Break early if the number is greater than the remaining target
            if (candidates[i] > target) break;

            // Include the number and proceed with the reduced target
            current.add(candidates[i]);
            findCombinations(i + 1, target - candidates[i], candidates, current, result);
            current.remove(current.size() - 1); // Backtrack
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates); // Sort to handle duplicates and allow early stopping
        List<List<Integer>> result = new ArrayList<>();
        findCombinations(0, target, candidates, new ArrayList<>(), result);
        return result;
    }
}
